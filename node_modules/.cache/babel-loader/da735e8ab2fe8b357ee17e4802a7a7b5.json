{"ast":null,"code":"import mockData from \"../mock-data.json\";\nconst TRANSACTIONS_PER_PAGE = 5;\nconst data = {\n  employees: mockData.employees,\n  transactions: mockData.transactions\n};\nexport const getEmployees = () => data.employees;\nexport const getTransactionsPaginated = _ref => {\n  let {\n    page\n  } = _ref;\n\n  if (page === null) {\n    throw new Error(\"Page cannot be null\");\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE;\n  const end = start + TRANSACTIONS_PER_PAGE;\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`);\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null;\n  const newData = data.transactions.slice(start, end);\n  const oldData = page === 0 ? [] : data.transactions.slice(0, start);\n  return {\n    nextPage,\n    data: oldData.concat(newData)\n  };\n};\nexport const getTransactionsByEmployee = _ref2 => {\n  let {\n    employeeId\n  } = _ref2;\n\n  if (employeeId === \"all\") {\n    return data.transactions;\n  }\n\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\");\n  }\n\n  return data.transactions.filter(transaction => transaction.employee.id === employeeId);\n};\nexport const setTransactionApproval = async _ref3 => {\n  let {\n    transactionId,\n    value\n  } = _ref3;\n  const transaction = data.transactions.find(currentTransaction => currentTransaction.id === transactionId);\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\");\n  }\n\n  try {\n    await api.updateTransactionApproval(transactionId, value);\n    transaction.approved = value;\n  } catch (error) {\n    console.error(`Failed to update transaction approval: ${error.message}`);\n    throw new Error(\"Failed to update transaction approval\");\n  }\n};","map":{"version":3,"names":["mockData","TRANSACTIONS_PER_PAGE","data","employees","transactions","getEmployees","getTransactionsPaginated","page","Error","start","end","length","nextPage","newData","slice","oldData","concat","getTransactionsByEmployee","employeeId","filter","transaction","employee","id","setTransactionApproval","transactionId","value","find","currentTransaction","api","updateTransactionApproval","approved","error","console","message"],"sources":["/Users/rosariodavi/Downloads/ramp-fe-challenge 4/src/utils/requests.ts"],"sourcesContent":["import {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  RequestByEmployeeParams,\n  SetTransactionApprovalParams,\n  Transaction,\n  Employee,\n} from \"./types\"\nimport mockData from \"../mock-data.json\"\n\nconst TRANSACTIONS_PER_PAGE = 5\n\nconst data: { employees: Employee[]; transactions: Transaction[] } = {\n  employees: mockData.employees,\n  transactions: mockData.transactions,\n}\n\nexport const getEmployees = (): Employee[] => data.employees\n\nexport const getTransactionsPaginated = ({\n  page,\n}: PaginatedRequestParams): PaginatedResponse<Transaction[]> => {\n  if (page === null) {\n    throw new Error(\"Page cannot be null\")\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE\n  const end = start + TRANSACTIONS_PER_PAGE\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`)\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null\n  const newData = data.transactions.slice(start,end)\n  const oldData = page === 0 ? [] : data.transactions.slice(0,start)\n\n  return {\n    nextPage,\n    data: oldData.concat(newData),\n  }\n}\n\nexport const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n  if (employeeId === \"all\") {\n    return data.transactions;\n  }\n\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\")\n  }\n\n  return data.transactions.filter((transaction) => transaction.employee.id === employeeId)\n}\n\nexport const setTransactionApproval = async ({ transactionId, value }: SetTransactionApprovalParams): Promise<void> => {\n  const transaction = data.transactions.find(\n    (currentTransaction) => currentTransaction.id === transactionId\n  )\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\")\n  }\n\n  try {\n    await api.updateTransactionApproval(transactionId, value)\n    transaction.approved = value\n  } catch (error) {\n    console.error(`Failed to update transaction approval: ${error.message}`)\n    throw new Error(\"Failed to update transaction approval\")\n  }\n}"],"mappings":"AAQA,OAAOA,QAAP,MAAqB,mBAArB;AAEA,MAAMC,qBAAqB,GAAG,CAA9B;AAEA,MAAMC,IAA4D,GAAG;EACnEC,SAAS,EAAEH,QAAQ,CAACG,SAD+C;EAEnEC,YAAY,EAAEJ,QAAQ,CAACI;AAF4C,CAArE;AAKA,OAAO,MAAMC,YAAY,GAAG,MAAkBH,IAAI,CAACC,SAA5C;AAEP,OAAO,MAAMG,wBAAwB,GAAG,QAEwB;EAAA,IAFvB;IACvCC;EADuC,CAEuB;;EAC9D,IAAIA,IAAI,KAAK,IAAb,EAAmB;IACjB,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;EACD;;EAED,MAAMC,KAAK,GAAGF,IAAI,GAAGN,qBAArB;EACA,MAAMS,GAAG,GAAGD,KAAK,GAAGR,qBAApB;;EAEA,IAAIQ,KAAK,GAAGP,IAAI,CAACE,YAAL,CAAkBO,MAA9B,EAAsC;IACpC,MAAM,IAAIH,KAAJ,CAAW,gBAAeD,IAAK,EAA/B,CAAN;EACD;;EAED,MAAMK,QAAQ,GAAGF,GAAG,GAAGR,IAAI,CAACE,YAAL,CAAkBO,MAAxB,GAAiCJ,IAAI,GAAG,CAAxC,GAA4C,IAA7D;EACA,MAAMM,OAAO,GAAGX,IAAI,CAACE,YAAL,CAAkBU,KAAlB,CAAwBL,KAAxB,EAA8BC,GAA9B,CAAhB;EACA,MAAMK,OAAO,GAAGR,IAAI,KAAK,CAAT,GAAa,EAAb,GAAkBL,IAAI,CAACE,YAAL,CAAkBU,KAAlB,CAAwB,CAAxB,EAA0BL,KAA1B,CAAlC;EAEA,OAAO;IACLG,QADK;IAELV,IAAI,EAAEa,OAAO,CAACC,MAAR,CAAeH,OAAf;EAFD,CAAP;AAID,CAtBM;AAwBP,OAAO,MAAMI,yBAAyB,GAAG,SAA6C;EAAA,IAA5C;IAAEC;EAAF,CAA4C;;EACpF,IAAIA,UAAU,KAAK,KAAnB,EAA0B;IACxB,OAAOhB,IAAI,CAACE,YAAZ;EACD;;EAED,IAAI,CAACc,UAAL,EAAiB;IACf,MAAM,IAAIV,KAAJ,CAAU,6BAAV,CAAN;EACD;;EAED,OAAON,IAAI,CAACE,YAAL,CAAkBe,MAAlB,CAA0BC,WAAD,IAAiBA,WAAW,CAACC,QAAZ,CAAqBC,EAArB,KAA4BJ,UAAtE,CAAP;AACD,CAVM;AAYP,OAAO,MAAMK,sBAAsB,GAAG,eAAiF;EAAA,IAA1E;IAAEC,aAAF;IAAiBC;EAAjB,CAA0E;EACrH,MAAML,WAAW,GAAGlB,IAAI,CAACE,YAAL,CAAkBsB,IAAlB,CACjBC,kBAAD,IAAwBA,kBAAkB,CAACL,EAAnB,KAA0BE,aADhC,CAApB;;EAIA,IAAI,CAACJ,WAAL,EAAkB;IAChB,MAAM,IAAIZ,KAAJ,CAAU,gCAAV,CAAN;EACD;;EAED,IAAI;IACF,MAAMoB,GAAG,CAACC,yBAAJ,CAA8BL,aAA9B,EAA6CC,KAA7C,CAAN;IACAL,WAAW,CAACU,QAAZ,GAAuBL,KAAvB;EACD,CAHD,CAGE,OAAOM,KAAP,EAAc;IACdC,OAAO,CAACD,KAAR,CAAe,0CAAyCA,KAAK,CAACE,OAAQ,EAAtE;IACA,MAAM,IAAIzB,KAAJ,CAAU,uCAAV,CAAN;EACD;AACF,CAhBM"},"metadata":{},"sourceType":"module"}